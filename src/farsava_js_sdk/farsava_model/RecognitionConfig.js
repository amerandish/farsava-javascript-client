/**
 * Farsava API
 * Farsava API. Speech Recognition and Text to Speech by applying powerful deep neural network models.
 *
 * OpenAPI spec version: 1.0.5
 * Contact: amir@amerandish.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AudioEncoding from './AudioEncoding';
import LanguageCode from './LanguageCode';
import SpeechRecognitionModel from './SpeechRecognitionModel';

/**
 * The RecognitionConfig model module.
 * @module farsava_js_sdk/farsava_model/RecognitionConfig
 * @version 1.0.5
 */
class RecognitionConfig {
    /**
     * Constructs a new <code>RecognitionConfig</code>.
     * Provides information to the recognizer that specifies how to process the request. 
     * @alias module:farsava_js_sdk/farsava_model/RecognitionConfig
     * @param audioEncoding {module:farsava_js_sdk/farsava_model/AudioEncoding} 
     * @param sampleRateHertz {Number} Sample rate in Hertz of the audio data sent in all RecognitionAudio messages. Valid values are 8000-48000. 16000 is optimal. For best results, set the sampling rate of the audio source to 16000 Hz. If that is not possible, use the native sample rate of the audio source (instead of re-sampling). This field is required for all audio formats. In Text to Speech endpoint is the synthesis sample rate (in hertz) for audio and Optional. If this is different from the voice's natural sample rate, then the synthesizer will honor this request by converting to the desired sample rate (which might result in worse audio quality), unless the specified sample rate is not supported for the encoding chosen. 
     * @param languageCode {module:farsava_js_sdk/farsava_model/LanguageCode} 
     */
    constructor(audioEncoding, sampleRateHertz, languageCode) { 
        
        RecognitionConfig.initialize(this, audioEncoding, sampleRateHertz, languageCode);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, audioEncoding, sampleRateHertz, languageCode) { 
        obj['audioEncoding'] = audioEncoding;
        obj['sampleRateHertz'] = sampleRateHertz;
        obj['languageCode'] = languageCode;
    }

    /**
     * Constructs a <code>RecognitionConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:farsava_js_sdk/farsava_model/RecognitionConfig} obj Optional instance to populate.
     * @return {module:farsava_js_sdk/farsava_model/RecognitionConfig} The populated <code>RecognitionConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RecognitionConfig();

            if (data.hasOwnProperty('audioEncoding')) {
                obj['audioEncoding'] = AudioEncoding.constructFromObject(data['audioEncoding']);
            }
            if (data.hasOwnProperty('sampleRateHertz')) {
                obj['sampleRateHertz'] = ApiClient.convertToType(data['sampleRateHertz'], 'Number');
            }
            if (data.hasOwnProperty('languageCode')) {
                obj['languageCode'] = LanguageCode.constructFromObject(data['languageCode']);
            }
            if (data.hasOwnProperty('maxAlternatives')) {
                obj['maxAlternatives'] = ApiClient.convertToType(data['maxAlternatives'], 'Number');
            }
            if (data.hasOwnProperty('profanityFilter')) {
                obj['profanityFilter'] = ApiClient.convertToType(data['profanityFilter'], 'Boolean');
            }
            if (data.hasOwnProperty('asrModel')) {
                obj['asrModel'] = SpeechRecognitionModel.constructFromObject(data['asrModel']);
            }
            if (data.hasOwnProperty('languageModel')) {
                obj['languageModel'] = ApiClient.convertToType(data['languageModel'], 'String');
            }
        }
        return obj;
    }

/**
     * @return {module:farsava_js_sdk/farsava_model/AudioEncoding}
     */
    getAudioEncoding() {
        return this.audioEncoding;
    }

    /**
     * @param {module:farsava_js_sdk/farsava_model/AudioEncoding} audioEncoding
     */
    setAudioEncoding(audioEncoding) {
        this['audioEncoding'] = audioEncoding;
    }
/**
     * Returns Sample rate in Hertz of the audio data sent in all RecognitionAudio messages. Valid values are 8000-48000. 16000 is optimal. For best results, set the sampling rate of the audio source to 16000 Hz. If that is not possible, use the native sample rate of the audio source (instead of re-sampling). This field is required for all audio formats. In Text to Speech endpoint is the synthesis sample rate (in hertz) for audio and Optional. If this is different from the voice's natural sample rate, then the synthesizer will honor this request by converting to the desired sample rate (which might result in worse audio quality), unless the specified sample rate is not supported for the encoding chosen. 
     * @return {Number}
     */
    getSampleRateHertz() {
        return this.sampleRateHertz;
    }

    /**
     * Sets Sample rate in Hertz of the audio data sent in all RecognitionAudio messages. Valid values are 8000-48000. 16000 is optimal. For best results, set the sampling rate of the audio source to 16000 Hz. If that is not possible, use the native sample rate of the audio source (instead of re-sampling). This field is required for all audio formats. In Text to Speech endpoint is the synthesis sample rate (in hertz) for audio and Optional. If this is different from the voice's natural sample rate, then the synthesizer will honor this request by converting to the desired sample rate (which might result in worse audio quality), unless the specified sample rate is not supported for the encoding chosen. 
     * @param {Number} sampleRateHertz Sample rate in Hertz of the audio data sent in all RecognitionAudio messages. Valid values are 8000-48000. 16000 is optimal. For best results, set the sampling rate of the audio source to 16000 Hz. If that is not possible, use the native sample rate of the audio source (instead of re-sampling). This field is required for all audio formats. In Text to Speech endpoint is the synthesis sample rate (in hertz) for audio and Optional. If this is different from the voice's natural sample rate, then the synthesizer will honor this request by converting to the desired sample rate (which might result in worse audio quality), unless the specified sample rate is not supported for the encoding chosen. 
     */
    setSampleRateHertz(sampleRateHertz) {
        this['sampleRateHertz'] = sampleRateHertz;
    }
/**
     * @return {module:farsava_js_sdk/farsava_model/LanguageCode}
     */
    getLanguageCode() {
        return this.languageCode;
    }

    /**
     * @param {module:farsava_js_sdk/farsava_model/LanguageCode} languageCode
     */
    setLanguageCode(languageCode) {
        this['languageCode'] = languageCode;
    }
/**
     * Returns Optional Maximum number of recognition hypotheses to be returned. Specifically, the maximum number of SpeechRecognitionAlternative messages within each SpeechRecognitionResult. The server may return fewer than maxAlternatives. Valid values are 1-5. A value of 0 or 1 will return a maximum of one. If omitted, will return a maximum of one.
     * minimum: 0
     * maximum: 5
     * @return {Number}
     */
    getMaxAlternatives() {
        return this.maxAlternatives;
    }

    /**
     * Sets Optional Maximum number of recognition hypotheses to be returned. Specifically, the maximum number of SpeechRecognitionAlternative messages within each SpeechRecognitionResult. The server may return fewer than maxAlternatives. Valid values are 1-5. A value of 0 or 1 will return a maximum of one. If omitted, will return a maximum of one.
     * @param {Number} maxAlternatives Optional Maximum number of recognition hypotheses to be returned. Specifically, the maximum number of SpeechRecognitionAlternative messages within each SpeechRecognitionResult. The server may return fewer than maxAlternatives. Valid values are 1-5. A value of 0 or 1 will return a maximum of one. If omitted, will return a maximum of one.
     */
    setMaxAlternatives(maxAlternatives) {
        this['maxAlternatives'] = maxAlternatives;
    }
/**
     * Returns Optional If set to true, the server will attempt to filter out profanities, replacing all but the initial character in each filtered word with asterisks, e.g. \"s***\". If set to false or omitted, profanities will not be filtered out.
     * @return {Boolean}
     */
    getProfanityFilter() {
        return this.profanityFilter;
    }

    /**
     * Sets Optional If set to true, the server will attempt to filter out profanities, replacing all but the initial character in each filtered word with asterisks, e.g. \"s***\". If set to false or omitted, profanities will not be filtered out.
     * @param {Boolean} profanityFilter Optional If set to true, the server will attempt to filter out profanities, replacing all but the initial character in each filtered word with asterisks, e.g. \"s***\". If set to false or omitted, profanities will not be filtered out.
     */
    setProfanityFilter(profanityFilter) {
        this['profanityFilter'] = profanityFilter;
    }
/**
     * @return {module:farsava_js_sdk/farsava_model/SpeechRecognitionModel}
     */
    getAsrModel() {
        return this.asrModel;
    }

    /**
     * @param {module:farsava_js_sdk/farsava_model/SpeechRecognitionModel} asrModel
     */
    setAsrModel(asrModel) {
        this['asrModel'] = asrModel;
    }
/**
     * Returns This is the language model id of a customized trained language model. You can train your own language models and then use them to recognize speech. Refer to [languagemodel/train](#languagemodel/train) for more info.    There are some pretrained language models which you can use.    Model | Description   ------------ | -------------   general | Best for audio content that is not one of the specific language models. This is the default language model and if you are not sure which one to use, simply use 'general'.   numbers | Best for audio content that contains only spoken numbers. For examble this language model can be used for speech enabled number input fileds.   yesno | Best for audio content that contains yes or no. For examble this language model can be used to receive confirmation from user.   country | Best for audio content that contains only spoken country. For examble this language model can be used for speech enabled input fileds.   city | Best for audio content that contains only spoken city. For examble this language model      can be used for speech enabled input fileds.   career | Best for audio content that contains only spoken career names. For examble this language model can be used for speech enabled input fileds. 
     * @return {String}
     */
    getLanguageModel() {
        return this.languageModel;
    }

    /**
     * Sets This is the language model id of a customized trained language model. You can train your own language models and then use them to recognize speech. Refer to [languagemodel/train](#languagemodel/train) for more info.    There are some pretrained language models which you can use.    Model | Description   ------------ | -------------   general | Best for audio content that is not one of the specific language models. This is the default language model and if you are not sure which one to use, simply use 'general'.   numbers | Best for audio content that contains only spoken numbers. For examble this language model can be used for speech enabled number input fileds.   yesno | Best for audio content that contains yes or no. For examble this language model can be used to receive confirmation from user.   country | Best for audio content that contains only spoken country. For examble this language model can be used for speech enabled input fileds.   city | Best for audio content that contains only spoken city. For examble this language model      can be used for speech enabled input fileds.   career | Best for audio content that contains only spoken career names. For examble this language model can be used for speech enabled input fileds. 
     * @param {String} languageModel This is the language model id of a customized trained language model. You can train your own language models and then use them to recognize speech. Refer to [languagemodel/train](#languagemodel/train) for more info.    There are some pretrained language models which you can use.    Model | Description   ------------ | -------------   general | Best for audio content that is not one of the specific language models. This is the default language model and if you are not sure which one to use, simply use 'general'.   numbers | Best for audio content that contains only spoken numbers. For examble this language model can be used for speech enabled number input fileds.   yesno | Best for audio content that contains yes or no. For examble this language model can be used to receive confirmation from user.   country | Best for audio content that contains only spoken country. For examble this language model can be used for speech enabled input fileds.   city | Best for audio content that contains only spoken city. For examble this language model      can be used for speech enabled input fileds.   career | Best for audio content that contains only spoken career names. For examble this language model can be used for speech enabled input fileds. 
     */
    setLanguageModel(languageModel) {
        this['languageModel'] = languageModel;
    }

}

/**
 * @member {module:farsava_js_sdk/farsava_model/AudioEncoding} audioEncoding
 */
RecognitionConfig.prototype['audioEncoding'] = undefined;

/**
 * Sample rate in Hertz of the audio data sent in all RecognitionAudio messages. Valid values are 8000-48000. 16000 is optimal. For best results, set the sampling rate of the audio source to 16000 Hz. If that is not possible, use the native sample rate of the audio source (instead of re-sampling). This field is required for all audio formats. In Text to Speech endpoint is the synthesis sample rate (in hertz) for audio and Optional. If this is different from the voice's natural sample rate, then the synthesizer will honor this request by converting to the desired sample rate (which might result in worse audio quality), unless the specified sample rate is not supported for the encoding chosen. 
 * @member {Number} sampleRateHertz
 * @default 16000
 */
RecognitionConfig.prototype['sampleRateHertz'] = 16000;

/**
 * @member {module:farsava_js_sdk/farsava_model/LanguageCode} languageCode
 */
RecognitionConfig.prototype['languageCode'] = undefined;

/**
 * Optional Maximum number of recognition hypotheses to be returned. Specifically, the maximum number of SpeechRecognitionAlternative messages within each SpeechRecognitionResult. The server may return fewer than maxAlternatives. Valid values are 1-5. A value of 0 or 1 will return a maximum of one. If omitted, will return a maximum of one.
 * @member {Number} maxAlternatives
 * @default 1
 */
RecognitionConfig.prototype['maxAlternatives'] = 1;

/**
 * Optional If set to true, the server will attempt to filter out profanities, replacing all but the initial character in each filtered word with asterisks, e.g. \"s***\". If set to false or omitted, profanities will not be filtered out.
 * @member {Boolean} profanityFilter
 * @default true
 */
RecognitionConfig.prototype['profanityFilter'] = true;

/**
 * @member {module:farsava_js_sdk/farsava_model/SpeechRecognitionModel} asrModel
 */
RecognitionConfig.prototype['asrModel'] = undefined;

/**
 * This is the language model id of a customized trained language model. You can train your own language models and then use them to recognize speech. Refer to [languagemodel/train](#languagemodel/train) for more info.    There are some pretrained language models which you can use.    Model | Description   ------------ | -------------   general | Best for audio content that is not one of the specific language models. This is the default language model and if you are not sure which one to use, simply use 'general'.   numbers | Best for audio content that contains only spoken numbers. For examble this language model can be used for speech enabled number input fileds.   yesno | Best for audio content that contains yes or no. For examble this language model can be used to receive confirmation from user.   country | Best for audio content that contains only spoken country. For examble this language model can be used for speech enabled input fileds.   city | Best for audio content that contains only spoken city. For examble this language model      can be used for speech enabled input fileds.   career | Best for audio content that contains only spoken career names. For examble this language model can be used for speech enabled input fileds. 
 * @member {String} languageModel
 */
RecognitionConfig.prototype['languageModel'] = undefined;






export default RecognitionConfig;

